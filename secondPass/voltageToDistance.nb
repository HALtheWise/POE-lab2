(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     58878,       1389]
NotebookOptionsPosition[     56017,       1282]
NotebookOutlinePosition[     56350,       1297]
CellTagsIndexPosition[     56307,       1294]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["POE Lab 2 - 3D Scanner", "Chapter"]], "Title",
 CellChangeTimes->{{3.6840188925738*^9, 3.684018904857298*^9}}],

Cell[CellGroupData[{

Cell["Voltage to Distance", "Section",
 CellChangeTimes->{{3.684018910342293*^9, 3.684018926630159*^9}}],

Cell[CellGroupData[{

Cell["\<\
Scrape distance calibration data off of our Github repository and remove \
header/blank rows\
\>", "Subsection",
 CellChangeTimes->{{3.6842010606547947`*^9, 3.68420109198176*^9}, {
  3.6842011691350117`*^9, 3.684201169272168*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"distanceCSV", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://raw.githubusercontent.com/HALtheWise/POE-lab2/master/docs/\
zeroPassDistances.csv\>\"", ",", "\"\<Csv\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"distanceData", "=", 
   RowBox[{"distanceCSV", "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;", 
      RowBox[{
       RowBox[{"Length", "[", "distanceCSV", "]"}], "-", "1"}]}], "]"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.683365903236642*^9, 3.683365957098632*^9}, {
  3.683365993084618*^9, 3.6833660019972477`*^9}, {3.683366869592553*^9, 
  3.6833668753392*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Fit the analog voltage read vs the distance to a 3rd order least squares \
function\
\>", "Subsection",
 CellChangeTimes->{{3.68420109644058*^9, 3.684201119249752*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fit", "[", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{"Reverse", ",", "distanceData"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "x", ",", 
     SuperscriptBox["x", "2"], ",", 
     SuperscriptBox["x", "3"]}], "}"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.683366012007105*^9, 3.683366021992859*^9}, {
  3.683366175332108*^9, 3.6833661782138233`*^9}, {3.683366326902767*^9, 
  3.6833663328841877`*^9}, {3.683366699191481*^9, 3.6833667207199497`*^9}, {
  3.683902291651194*^9, 3.683902307507304*^9}, {3.683902572842381*^9, 
  3.683902749690529*^9}, {3.683903886112605*^9, 3.683903886979486*^9}, {
  3.683903920850472*^9, 3.683903924373612*^9}, {3.684018937388323*^9, 
  3.684018937723402*^9}}],

Cell[BoxData[
 RowBox[{"230.1430411867322`", "\[VeryThinSpace]", "-", 
  RowBox[{"1.4451995839029892`", " ", "x"}], "+", 
  RowBox[{"0.0035444572391777783`", " ", 
   SuperscriptBox["x", "2"]}], "-", 
  RowBox[{"2.9360497052173657`*^-6", " ", 
   SuperscriptBox["x", "3"]}]}]], "Output",
 CellChangeTimes->{{3.683366018309149*^9, 3.683366024330303*^9}, 
   3.683366061057962*^9, 3.683366179144628*^9, 3.683366248629561*^9, 
   3.683366293617731*^9, {3.683366328715435*^9, 3.683366335518475*^9}, 
   3.683366721693606*^9, {3.683902282846643*^9, 3.683902307825914*^9}, {
   3.683902582452379*^9, 3.6839027500830927`*^9}, 3.683903513733232*^9, 
   3.683903887562367*^9, 3.68390392560872*^9, 3.683970346157509*^9, 
   3.68401522065232*^9, 3.6840161028119717`*^9, 3.684016164030698*^9, 
   3.68401885893922*^9, 3.684018953666399*^9, 3.6840193592967167`*^9, 
   3.684021133841301*^9, 3.684102228146805*^9, 3.684102980859586*^9, 
   3.6841040153572493`*^9, 3.684104101920355*^9, 3.684104502936933*^9, 
   3.6841056609069977`*^9, 3.684187091483939*^9, 3.68419090043712*^9, 
   3.684195549302863*^9, 3.6841975235995703`*^9, 3.684197713767104*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Plot the data to see how inputs voltages correspond to output voltages\
\>", "Subsection",
 CellChangeTimes->{{3.684201123437108*^9, 3.684201156413226*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"230.1430411867322`", "\[VeryThinSpace]", "-", 
    RowBox[{"1.4451995839029892`", " ", "x"}], "+", 
    RowBox[{"0.0035444572391777783`", " ", 
     SuperscriptBox["x", "2"]}], "-", 
    RowBox[{"2.9360497052173657`*^-6", " ", 
     SuperscriptBox["x", "3"]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "500"}], "}"}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", "\"\<Analog Voltage Read vs Distance\>\""}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Analog Voltage Read\>\"", ",", "\"\<Distance (cm)\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.683903519767494*^9, 3.68390353047996*^9}, {
  3.684200359041894*^9, 3.684200386605102*^9}, {3.6842013264100943`*^9, 
  3.6842014090095778`*^9}},
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
JeLWk4b3uETG4x63L7/oiUDl7PyqXDL+B6fcsiE=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Analog Voltage Read\"", TraditionalForm], 
    FormBox["\"Distance (cm)\"", TraditionalForm]},
  AxesOrigin->{0, 26.65134692628294},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{799., Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Analog Voltage Read vs Distance\"", TraditionalForm],
  PlotRange->{{0, 500}, {26.65134692628294, 230.14302643979804`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.683903516071151*^9, 3.6839035310700493`*^9}, 
   3.683970346360786*^9, 3.684015220799141*^9, 3.6840161029511127`*^9, 
   3.684016167427537*^9, 3.684018859147944*^9, 3.6840189574900618`*^9, 
   3.684019359408341*^9, 3.684021133931602*^9, 3.684102228329843*^9, 
   3.684102981101466*^9, 3.684104015477709*^9, 3.6841041021011*^9, 
   3.684104502979517*^9, 3.6841056609836397`*^9, 3.684187091700592*^9, 
   3.6841909005422564`*^9, 3.684195549424261*^9, 3.684197523727416*^9, 
   3.684197713879327*^9, 3.684200387102434*^9, {3.6842013376265163`*^9, 
   3.684201357897623*^9}, {3.684201398734634*^9, 3.6842014093501368`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Make Functions", "Section",
 CellChangeTimes->{{3.68401896246172*^9, 3.684019000514555*^9}, {
  3.684200449964945*^9, 3.684200515150178*^9}, {3.6842006888426447`*^9, 
  3.68420069181749*^9}}],

Cell[CellGroupData[{

Cell["\<\
voltageToDistance takes input analog voltage read and returns distance in cm\
\>", "Subsection",
 CellChangeTimes->{{3.684200536349566*^9, 3.684200578550555*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"voltageToDistance", "[", "x_", "]"}], "=", 
   RowBox[{"(", 
    RowBox[{"230.1430411867322`", "\[VeryThinSpace]", "-", 
     RowBox[{"1.4451995839029892`", " ", "x"}], "+", 
     RowBox[{"0.0035444572391777783`", " ", 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{"2.9360497052173657`*^-6", " ", 
      SuperscriptBox["x", "3"]}]}], ")"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.684015495615988*^9, 3.684015531386505*^9}, {
  3.684015565679158*^9, 3.68401559271061*^9}, {3.68401569818023*^9, 
  3.684015698798704*^9}, {3.684015954048243*^9, 3.6840159558332567`*^9}, {
  3.68420058950248*^9, 3.684200596391652*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
anglesToPan takes in the servo angles and converts to pan in degrees\
\>", "Subsection",
 CellChangeTimes->{{3.6842006158221607`*^9, 3.684200637140813*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"anglesToPan", "[", 
   RowBox[{"servo1_", ",", "servo2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"N", "@", "servo1"}], "-", "servo2"}], ")"}], "/", "2"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 StyleBox[
  RowBox[{
  "anglesToPan", " ", "takes", " ", "in", " ", "the", " ", "servo", " ", 
   "angles", " ", "and", " ", "converts", " ", "to", " ", "pan", " ", "in", 
   " ", "degrees"}], "Subsection"]], "Input",
 CellChangeTimes->{{3.684200643121523*^9, 3.684200643122548*^9}, {
  3.684200674051022*^9, 3.68420067473103*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"anglesToTilt", "[", 
   RowBox[{"servo1_", ",", "servo2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"N", "@", "servo1"}], "+", "servo2"}], ")"}], "/", "2"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
panTiltDistance takes in the servo positions and voltage and outputs the \
distance, tilt, and pan\
\>", "Subsection",
 CellChangeTimes->{
  3.684200529453821*^9, {3.684200732701352*^9, 3.6842007478850307`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"panTiltDistance", "[", 
   RowBox[{"{", 
    RowBox[{"servo1_", ",", "servo2_", ",", "voltage_"}], "}"}], "]"}], ":=", 
  
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"pan", ",", "tilt", ",", "distance"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pan", "=", 
      RowBox[{"anglesToPan", "[", 
       RowBox[{"servo1", ",", "servo2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tilt", "=", 
      RowBox[{"anglesToTilt", "[", 
       RowBox[{"servo1", ",", "servo2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"distance", "=", 
      RowBox[{"voltageToDistance", "[", "voltage", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"distance", ",", "tilt", ",", "pan"}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.684015623202557*^9, 3.6840157985694523`*^9}, {
  3.684018234662003*^9, 3.68401823736196*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
toCartesian takes in the distance, tilt, and pan and outputs Cartesian \
coordinates\
\>", "Subsection",
 CellChangeTimes->{{3.6842007006286373`*^9, 3.684200725686028*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "@", "toCartesian"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"{", 
    RowBox[{"distance_", ",", "tilt_", ",", "pan_"}], "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "radPan", ",", "radTilt", ",", "basePoint", ",", "panRotation", ",", 
      "tiltRotation"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"radPan", "=", 
      RowBox[{"pan", "*", 
       FractionBox["\[Pi]", "180"]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"radTilt", "=", 
      RowBox[{"tilt", "*", 
       FractionBox["\[Pi]", "180"]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"basePoint", "=", 
      RowBox[{"distance", "*", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"panRotation", "=", 
      RowBox[{"RotationMatrix", "[", 
       RowBox[{"radPan", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tiltRotation", "=", 
      RowBox[{"RotationMatrix", "[", 
       RowBox[{"radTilt", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tiltRotation", ".", "panRotation", ".", "basePoint"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6840182890973787`*^9, 3.684018310600751*^9}, {
  3.684018719742815*^9, 3.68401876888431*^9}, {3.6840212140848827`*^9, 
  3.684021330712226*^9}, {3.684193936684238*^9, 3.684193978367608*^9}, {
  3.684194057734468*^9, 3.684194134985495*^9}, {3.684194330248901*^9, 
  3.6841943960776*^9}, {3.684194472845529*^9, 3.684194477315221*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Open Serial device and start reading data", "Section",
 CellChangeTimes->{{3.684019007281744*^9, 3.684019015647167*^9}}],

Cell[CellGroupData[{

Cell["Open Arduino serial port", "Subsection",
 CellChangeTimes->{{3.684200757532363*^9, 3.684200762537593*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"serial", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<Serial\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\</dev/ttyUSB1\>\"", ",", 
      RowBox[{"\"\<BaudRate\>\"", "\[Rule]", "19200"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.683366967035421*^9, 3.6833670229287157`*^9}, {
   3.68336730353249*^9, 3.683367305992813*^9}, {3.683369022700472*^9, 
   3.68336902287643*^9}, {3.6833697602386913`*^9, 3.683369765350923*^9}, {
   3.683369879320653*^9, 3.683369879454358*^9}, {3.683369914695787*^9, 
   3.683369916101098*^9}, {3.6833701594339533`*^9, 3.68337015955385*^9}, {
   3.683370791570573*^9, 3.683370791812965*^9}, {3.683370863275147*^9, 
   3.683370938506722*^9}, {3.683973423462914*^9, 3.683973423546906*^9}, {
   3.684015042464724*^9, 3.684015042677374*^9}, {3.684017372308382*^9, 
   3.684017372952544*^9}, {3.684018419709014*^9, 3.6840184197964697`*^9}, {
   3.684018584167098*^9, 3.684018584237925*^9}, {3.684019334836526*^9, 
   3.6840193350103903`*^9}, {3.684021455979472*^9, 3.684021456079331*^9}, {
   3.684102220647492*^9, 3.684102220873767*^9}, {3.684102996413055*^9, 
   3.6841030014343977`*^9}, {3.684103463168991*^9, 3.684103463328383*^9}, {
   3.684103800670272*^9, 3.6841038008539963`*^9}, 3.684191171302823*^9, {
   3.684193490344006*^9, 3.6841934904139423`*^9}, {3.68419580815476*^9, 
   3.6841958090281477`*^9}, {3.68419773063389*^9, 3.684197731240613*^9}, {
   3.684201671603503*^9, 3.6842016716981897`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{11.133, 
             18.727999999999998`}, {11.133, 18.451999999999998`}, {
             11.357000000000001`, 18.227999999999998`}, {11.633, 
             18.227999999999998`}, {14.792, 18.227999999999998`}, {15.068, 
             18.227999999999998`}, {15.292, 18.451999999999998`}, {15.292, 
             18.727999999999998`}, {15.292, 20.639000000000003`}, {15.292, 
             20.915}, {15.068, 21.139000000000003`}, {14.792, 
             21.139000000000003`}, {11.633, 21.139000000000003`}, {
             11.357000000000001`, 21.139000000000003`}, {11.133, 20.915}, {
             11.133, 20.639000000000003`}, {11.133, 
             18.727999999999998`}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             12.357000000000001`, 1.}, {14.113000000000001`, 1.}, {
             14.113000000000001`, 9.554}, {12.357000000000001`, 9.554}}}]}, 
           {FaceForm[{RGBColor[0.624375, 0.695304, 0.691308], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}}}, {{{15.876000000000001`, 19.799}, {8.122, 19.799}, {
             8.122, 11.516}, {10.573, 11.516}, {10.573, 11.493}, {
             11.982000000000001`, 9.171}, {14.539, 9.171}, {
             15.876000000000001`, 11.493}, {15.876000000000001`, 11.516}, {
             18.326, 11.516}, {18.326, 19.799}, {15.876000000000001`, 
             19.799}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             8.806000000000001, 7.993}, {9.995000000000001, 7.993}, {
             9.995000000000001, 11.008}, {8.806000000000001, 11.008}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.5, 
             7.993}, {17.689, 7.993}, {17.689, 11.008}, {16.5, 11.008}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Serial\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (/dev/ttyUSB1)", "Not connected (/dev/ttyUSB1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"Serial", 2}],
                Devices`DeviceAPI`DeviceDump`ind$$ = 1, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{161., {4., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{11.133, 
             18.727999999999998`}, {11.133, 18.451999999999998`}, {
             11.357000000000001`, 18.227999999999998`}, {11.633, 
             18.227999999999998`}, {14.792, 18.227999999999998`}, {15.068, 
             18.227999999999998`}, {15.292, 18.451999999999998`}, {15.292, 
             18.727999999999998`}, {15.292, 20.639000000000003`}, {15.292, 
             20.915}, {15.068, 21.139000000000003`}, {14.792, 
             21.139000000000003`}, {11.633, 21.139000000000003`}, {
             11.357000000000001`, 21.139000000000003`}, {11.133, 20.915}, {
             11.133, 20.639000000000003`}, {11.133, 
             18.727999999999998`}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             12.357000000000001`, 1.}, {14.113000000000001`, 1.}, {
             14.113000000000001`, 9.554}, {12.357000000000001`, 9.554}}}]}, 
           {FaceForm[{RGBColor[0.624375, 0.695304, 0.691308], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}}}, {{{15.876000000000001`, 19.799}, {8.122, 19.799}, {
             8.122, 11.516}, {10.573, 11.516}, {10.573, 11.493}, {
             11.982000000000001`, 9.171}, {14.539, 9.171}, {
             15.876000000000001`, 11.493}, {15.876000000000001`, 11.516}, {
             18.326, 11.516}, {18.326, 19.799}, {15.876000000000001`, 
             19.799}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             8.806000000000001, 7.993}, {9.995000000000001, 7.993}, {
             9.995000000000001, 11.008}, {8.806000000000001, 11.008}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.5, 
             7.993}, {17.689, 7.993}, {17.689, 11.008}, {16.5, 11.008}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Serial\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (/dev/ttyUSB1)", "Not connected (/dev/ttyUSB1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"Serial", 2}],
                Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"Serial", 2}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                   MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"Serial", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.683366992498125*^9, 3.683367029144499*^9, 3.6833673071702147`*^9, 
   3.683367810823956*^9, {3.683369020411574*^9, 3.683369029810342*^9}, 
   3.6833697658030033`*^9, 3.683369881002227*^9, 3.68336991676865*^9, {
   3.683370135355196*^9, 3.6833701600738783`*^9}, {3.6833707977496357`*^9, 
   3.683370806461913*^9}, {3.68337092275086*^9, 3.6833709392138567`*^9}, {
   3.6836252234700603`*^9, 3.6836252364340487`*^9}, 3.6836281406133757`*^9, 
   3.6836290821198053`*^9, 3.683629528387824*^9, {3.683630193512723*^9, 
   3.683630210651704*^9}, 3.683630497631908*^9, 3.683901969723695*^9, 
   3.6839703470593*^9, 3.683970393936681*^9, {3.68397340923071*^9, 
   3.683973425671376*^9}, {3.684015038181381*^9, 3.684015043110373*^9}, 
   3.6840150783070097`*^9, {3.6840152122054358`*^9, 3.684015228677496*^9}, 
   3.684015933757268*^9, 3.68401606423982*^9, 3.684016103333605*^9, 
   3.684017373640205*^9, 3.684018420204913*^9, 3.6840185849089003`*^9, 
   3.684018859832554*^9, 3.6840190631459*^9, 3.6840193795814342`*^9, 
   3.6840196900129833`*^9, 3.6840214002151947`*^9, 3.684021456723171*^9, 
   3.684021641168991*^9, {3.684102229136057*^9, 3.684102242090577*^9}, 
   3.6841030093784733`*^9, 3.684103112974387*^9, {3.68410324400959*^9, 
   3.6841032533291197`*^9}, {3.6841034601221437`*^9, 3.6841034637958107`*^9}, 
   3.684103657696109*^9, 3.6841038037103777`*^9, 3.684103869033042*^9, 
   3.6841039346947403`*^9, {3.684104024960141*^9, 3.684104049425902*^9}, {
   3.684104079817504*^9, 3.6841041092703657`*^9}, 3.684104160044633*^9, 
   3.684104515144964*^9, 3.68410520047836*^9, 3.684105288884267*^9, 
   3.6841056613035517`*^9, 3.6841057435059547`*^9, 3.684187099089513*^9, {
   3.684187252808445*^9, 3.684187264287541*^9}, {3.684187365439443*^9, 
   3.684187374091879*^9}, 3.6841877817582903`*^9, 3.684187855078289*^9, 
   3.684188127037163*^9, 3.684188276084372*^9, 3.684188307121009*^9, 
   3.684190224915242*^9, 3.6841904719188833`*^9, {3.684190987748228*^9, 
   3.684190998181101*^9}, 3.684191059030562*^9, 3.684191171942747*^9, 
   3.684191831550542*^9, 3.68419316009296*^9, 3.684193352555121*^9, 
   3.68419349138661*^9, 3.684193583371827*^9, 3.684194178075499*^9, 
   3.684195573581109*^9, 3.6841957650583897`*^9, 3.6841958208064213`*^9, {
   3.684197724296709*^9, 3.6841977315494967`*^9}, 3.6841984420064507`*^9, 
   3.684201673342382*^9, 3.684202295764806*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Clear the rawdata list to start capturing fresh scan data", "Subsection",
 CellChangeTimes->{{3.684200788116889*^9, 3.684200806114606*^9}, {
  3.6842008773894253`*^9, 3.6842008778697767`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rawdata", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Send a byte that contains 1 to the Arduino. This tells the Arduino to change \
state and start the scan procedure.\
\>", "Subsection",
 CellChangeTimes->{{3.684200843718896*^9, 3.6842008791827383`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceWrite", "[", 
   RowBox[{"serial", ",", "1"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.684192898544364*^9, 3.684192907130796*^9}, 
   3.684200779164297*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Read a set number of data from the Arduino to rawdata.
Magic numbers for various grid sizes:
1 degree = 3734\
\>", "Subsection",
 CellChangeTimes->{{3.68420089287611*^9, 3.684200979605132*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"rawdata", ",", 
       RowBox[{"ToExpression", "[", 
        RowBox[{"StringSplit", "[", 
         RowBox[{
          RowBox[{"FromCharacterCode", "[", 
           RowBox[{"DeviceReadBuffer", "[", 
            RowBox[{"serial", ",", 
             RowBox[{"\"\<ReadTerminator\>\"", "\[Rule]", "10"}]}], "]"}], 
           "]"}], ",", "\"\<,\>\""}], "]"}], "]"}]}], "]"}], ",", "267"}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", 
    RowBox[{"Dimensions", "@", "rawdata"}]}]}]}]], "Input",
 CellChangeTimes->{{3.684189425889881*^9, 3.684189460226506*^9}, {
   3.684189492169339*^9, 3.684189520195428*^9}, {3.684190233527355*^9, 
   3.6841902439743013`*^9}, {3.6841904473839483`*^9, 3.684190450584948*^9}, {
   3.6841909263257637`*^9, 3.684190975741024*^9}, {3.68419123346632*^9, 
   3.684191268184511*^9}, {3.68419189224183*^9, 3.684191921337607*^9}, 
   3.684193266961033*^9, {3.684193540923654*^9, 3.684193542565218*^9}, {
   3.6841958536794786`*^9, 3.684195871934074*^9}, {3.684196525880858*^9, 
   3.684196526971589*^9}, {3.684197021428608*^9, 3.684197022619246*^9}, {
   3.684198175371932*^9, 3.684198176290659*^9}, {3.684198436017374*^9, 
   3.6841984366261168`*^9}, {3.68419953158836*^9, 3.684199533673489*^9}, {
   3.6842017107249947`*^9, 3.684201712629683*^9}, {3.6842022754937162`*^9, 
   3.6842022770935297`*^9}, {3.684202362763694*^9, 3.6842023913713303`*^9}}],

Cell[BoxData[
 DynamicBox[ToBoxes[
   Dimensions[$CellContext`rawdata], StandardForm],
  ImageSizeCache->{61., {3., 10.}}]], "Output",
 CellChangeTimes->{{3.6842017214381332`*^9, 3.684201740014436*^9}, 
   3.684202012303722*^9, {3.6842022697049513`*^9, 3.6842022810228987`*^9}, {
   3.684202339927853*^9, 3.684202385280878*^9}, 3.6842024242092113`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Filter the raw data and make a 3d plot with pretty colors.", \
"Subsection",
 CellChangeTimes->{{3.684200987966383*^9, 3.6842010003112583`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"panTiltDistance", "/@", "rawdata"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"points", ",", 
     RowBox[{
      RowBox[{"30", "<", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "<", "80"}], "&"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"toCartesian", "/@", "points"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPointPlot3D", "[", 
  RowBox[{"points", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], "}"}]}], ",", 
   
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", ".03", "]"}]}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
      RowBox[{"Hue", "[", 
       RowBox[{"x", "/", "2"}], "]"}]}], "]"}]}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6841043975811577`*^9, 3.684104411608992*^9}, {
   3.6841044689485693`*^9, 3.684104487929335*^9}, 3.684104546492498*^9, {
   3.684105134444283*^9, 3.684105175244432*^9}, {3.684105223870569*^9, 
   3.684105233863044*^9}, 3.6841053580238047`*^9, 3.684105626967767*^9, {
   3.684105709994445*^9, 3.684105741218809*^9}, 3.684105772612468*^9, {
   3.684187103798912*^9, 3.6841871229117613`*^9}, {3.68418717910474*^9, 
   3.6841872048549833`*^9}, {3.684187296432001*^9, 3.684187324546262*^9}, {
   3.6841874066332197`*^9, 3.6841874190021343`*^9}, {3.684187488695813*^9, 
   3.6841874899052277`*^9}, {3.684187592570665*^9, 3.68418759334696*^9}, {
   3.6841882609004707`*^9, 3.6841882646584682`*^9}, {3.684189532180853*^9, 
   3.6841895643457527`*^9}, {3.684191318285158*^9, 3.6841914378061132`*^9}, {
   3.6841915417065983`*^9, 3.684191579583664*^9}, {3.684191613009386*^9, 
   3.684191645367763*^9}, {3.6841916964890833`*^9, 3.684191730513007*^9}, {
   3.6841937636513166`*^9, 3.6841937811770563`*^9}, {3.684193845370532*^9, 
   3.6841938727612753`*^9}, {3.6841944026184998`*^9, 
   3.6841944088124847`*^9}, {3.684194604499161*^9, 3.6841946144456873`*^9}, {
   3.684196364330171*^9, 3.684196379519306*^9}, {3.684196417046595*^9, 
   3.684196417226552*^9}, {3.684196447857305*^9, 3.68419644911272*^9}, {
   3.6841970418082323`*^9, 3.6841970423731956`*^9}, {3.6841995559083567`*^9, 
   3.684199556753214*^9}, {3.684201739172728*^9, 3.684201741201832*^9}}],

Cell[BoxData[
 Graphics3DBox[
  {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[0.03], 
   {Hue[0.07339650934648696], 
    Point3DBox[{28.37924941386362, 0., 16.38476728849369}]}, 
   {Hue[0.067791898669677], 
    Point3DBox[{27.909349142443823`, -5.682479112414615, 
     16.113470240297193`}]}, 
   {Hue[0.09248460273376896], 
    Point3DBox[{29.97962824136774, -3.0286381858772455`, 17.30874643535857}]}, 
   {Hue[0.07537666614368883], 
    Point3DBox[{28.545269191171062`, 0., 16.480618851612945`}]}, 
   {Hue[0.07679052253151548], 
    Point3DBox[{28.66380936080984, 2.895709942896001, 
     16.549058050463675`}]}, 
   {Hue[0.07647968351172846], 
    Point3DBox[{28.637748078735395`, 5.830784675538165, 
     16.53401156224257}]}, 
   {Hue[0.09945335156601814], 
    Point3DBox[{30.56390021966582, 9.456503637904055, 
     17.646076019308925`}]}, 
   {Hue[0.08100612050260785], 
    Point3DBox[{29.017252399950703`, 5.645460159697229, 
     13.530967012713525`}]}, 
   {Hue[0.09858226248473424], 
    Point3DBox[{30.490866601573526`, 2.943376639674647, 
     14.21812460009621}]}, 
   {Hue[0.09042842041510933], 
    Point3DBox[{29.807234352596026`, -5.799155333143304, 
     13.899341647036279`}]}, 
   {Hue[0.08974503102335935], 
    Point3DBox[{29.749937801740597`, 5.582375122258928, 
     10.828091831104476`}]}, 
   {Hue[0.0840340295133949], 
    Point3DBox[{29.271117538503578`, 8.346529633742255, 
     10.653815507722696`}]}, 
   {Hue[0.18604825421640672`], 
    Point3DBox[{37.82416691889512, 10.492477480630996`, 
     10.134954980297936`}]}, 
   {Hue[0.09382408479325795], 
    Point3DBox[{30.091932738434803`, 5.493195749652221, 8.06310907595527}]}, 
   {Hue[0.09721514096756477], 
    Point3DBox[{30.37624476447789, 2.7513262251103696`, 8.13929025373197}]}, 
   {Hue[0.0981092083107092], 
    Point3DBox[{30.451204919863788`, 0., 8.159375766832133}]}, 
   {Hue[0.09601796450761413], 
    Point3DBox[{30.27587141547867, -2.742234916110692, 8.112395295926023}]}, 
   {Hue[0.19885289920374644`], 
    Point3DBox[{38.89773054390855, -7.1006688055633935`, 
     10.422615486643712`}]}, 
   {Hue[0.13591051809331847`], 
    Point3DBox[{33.62053223823912, -6.019659087012515, 5.928206939380314}]}, 
   {Hue[0.10080177764938793`], 
    Point3DBox[{30.676954599194218`, -2.725289022877625, 5.409174781806575}]}, 
   {Hue[0.10041816241533895`], 
    Point3DBox[{30.64479163320155, 0., 5.403503583122459}]}, 
   {Hue[0.09880246128208875], 
    Point3DBox[{30.509328450328038`, 2.7103973978965636`, 
     5.379617769089214}]}, 
   {Hue[0.09574497757428886], 
    Point3DBox[{30.25298371792737, 5.41670926136419, 5.334417276404484}]}, 
   {Hue[0.09307383958376587], 
    Point3DBox[{30.02903087996488, 8.170381020219377, 5.294928348665467}]}, 
   {Hue[0.2214207606088931], 
    Point3DBox[{40.789859152149134`, 19.0932793902093, 3.568650262632208}]}, 
   {Hue[0.2393418937356733], 
    Point3DBox[{42.29239800917773, 15.451973435078694`, 
     3.700105379129409}]}, 
   {Hue[0.10757915546012181`], 
    Point3DBox[{31.24518169942003, 8.404101346614729, 
     2.7335991885069175`}]}, 
   {Hue[0.09991716427708013], 
    Point3DBox[{30.602787081106126`, 5.41670926136419, 2.677396941894388}]}, 
   {Hue[0.19035437416159903`], 
    Point3DBox[{38.1851994772108, 3.353533275303894, 3.3407720687319853`}]}, 
   {Hue[0.41005102665145465`], 
    Point3DBox[{56.60494753610067, 0., 4.952291208888492}]}, 
   {Hue[0.5], 
    Point3DBox[{64.1464253349602, -5.633522275586623, 5.612085022521139}]}, 
   {Hue[0.16799610513133537`], 
    Point3DBox[{36.31064345688476, -6.427002814408094, 3.176769667809185}]}, 
   {Hue[0.4185743216263569], 
    Point3DBox[{57.3195553568846, 5.014811292074052, 0.}]}, 
   {Hue[0.09493934873307341], 
    Point3DBox[{30.185438399799008`, 8.088163842405546, 0.}]}, 
   {Hue[0.2438800296693302], 
    Point3DBox[{42.6728831900287, 15.531659291489037`, 0.}]}, 
   {Hue[0.20878284688712806`], 
    Point3DBox[{39.730274565371474`, 18.526531290433475`, 0.}]}, 
   {Hue[0.1833228941339132], 
    Point3DBox[{37.59566800677991, 21.705869044078185`, 0.}]}, 
   {Hue[0.33418318712688594`], 
    Point3DBox[{50.24405639835623, 35.18126704036283, 0.}]}, 
   {Hue[0.14351492175282313`], 
    Point3DBox[{34.25809861878579, 28.745957915858042`, 0.}]}, 
   {Hue[0.06574014284099136], 
    Point3DBox[{27.737326378262228`, 27.737326378262225`, 0.}]}, 
   {Hue[0.1399136905254203], 
    Point3DBox[{33.95616515207705, 28.601442780092576`, -2.970779507620775}]}, 
   {Hue[0.09756630735709743], 
    Point3DBox[{30.405687163115438`, 
     21.371616810290313`, -2.6601529334883134`}]}, 
   {Hue[0.09996959410803764], 
    Point3DBox[{30.60718288898969, 
     17.738565878682152`, -2.6777815252512376`}]}, 
   {Hue[0.10559972858343517`], 
    Point3DBox[{31.07922311991347, 
     14.547838668570025`, -2.7190796941852278`}]}, 
   {Hue[0.10713531852304162`], 
    Point3DBox[{31.20796964148654, 
     11.402160685197996`, -2.7303435552912667`}]}, 
   {Hue[0.09601796450761413], 
    Point3DBox[{30.27587141547867, 8.143383328043875, -2.648795527222954}]}, 
   {Hue[0.09488009956998462], 
    Point3DBox[{30.18047084729228, 5.341959067897784, -2.640449059012713}]}, 
   {Hue[0.11467536044336454`], 
    Point3DBox[{31.84013982228722, 2.796292014870685, -2.7856512795304607`}]}, 
   {Hue[0.48996722622941696`], 
    Point3DBox[{
     63.30526019615814, -5.559648750723101, -5.538492608722749}]}, 
   {Hue[0.16121818052433204`], 
    Point3DBox[{
     35.74237051231217, -13.20984621496415, -6.302344275799276}]}, 
   {Hue[0.09189034737913811], 
    Point3DBox[{
     29.92980484264549, -8.143383328043875, -5.277432121097274}]}, 
   {Hue[0.10007521878767646`], 
    Point3DBox[{
     30.616038645168487`, -5.4817131963514525`, -5.398433655556242}]}, 
   {Hue[0.10355601183539855`], 
    Point3DBox[{
     30.907874366184476`, -2.745803546381224, -5.449892167105869}]}, 
   {Hue[0.09705898581562641], 
    Point3DBox[{30.363152445936826`, 0., -5.353842995582884}]}, 
   {Hue[0.09811897902677612], 
    Point3DBox[{30.452024113630593`, 2.705306577057101, -5.369513468417852}]}, 
   {Hue[0.0907654887399536], 
    Point3DBox[{29.83549474505945, 5.341959067897784, -5.2608027063396055`}]}, 
   {Hue[0.08796379253026305], 
    Point3DBox[{29.600595679756534`, 
     8.053811196765245, -5.2193836633835025`}]}, 
   {Hue[0.08458258628866312], 
    Point3DBox[{29.317109489140623`, 
     10.835165722581536`, -5.169397399319655}]}, 
   {Hue[0.07580913584253345], 
    Point3DBox[{28.5815282001525, 13.5333880554238, -5.039694571566739}]}, 
   {Hue[0.0791276304992283], 
    Point3DBox[{28.859756542816548`, 16.9192293194057, -5.08875373517621}]}, 
   {Hue[0.04114794485276503], 
    Point3DBox[{25.67547388290669, 
     18.255502462209925`, -4.5272787880319845`}]}, 
   {Hue[0.05683018563913722], 
    Point3DBox[{26.990300126320484`, 
     22.996925858969014`, -4.7591181296893925`}]}, 
   {Hue[0.044383213102426704`], 
    Point3DBox[{25.946724379381347`, 
     26.346994426088457`, -4.575107569091033}]}, 
   {Hue[0.056361616381984274`], 
    Point3DBox[{26.951014467813252`, 
     23.412342526006622`, -7.221502561850066}]}, 
   {Hue[0.07254778845605023], 
    Point3DBox[{28.308091183653975`, 
     20.520767019216684`, -7.585130171926669}]}, 
   {Hue[0.07915373081315578], 
    Point3DBox[{28.861944838365677`, 
     17.251274547430683`, -7.733534811431694}]}, 
   {Hue[0.08423331161133957], 
    Point3DBox[{29.28782569493285, 14.138909055495967`, -7.847649243020743}]}, 
   {Hue[0.07976024205459507], 
    Point3DBox[{28.912795791876277`, 
     10.894622310793034`, -7.747160283359213}]}, 
   {Hue[0.08033079661142098], 
    Point3DBox[{28.960632074639257`, 
     8.033720359778604, -7.75997797669446}]}, 
   {Hue[0.08797832748237303], 
    Point3DBox[{29.60181431532917, 2.6811822418501827`, -7.931782240288499}]}, 
   {Hue[0.09037002989325488], 
    Point3DBox[{29.802338790058332`, 0., -7.985512611354854}]}, 
   {Hue[0.0892672636126477], 
    Point3DBox[{
     29.709880954099447`, -2.6909703700277605`, -7.960738608875741}]}, 
   {Hue[0.08617167775841471], 
    Point3DBox[{29.450341671714305`, -5.376075146221443, -7.89119526775649}]}, 
   {Hue[0.07988838086111398], 
    Point3DBox[{
     28.923539171467617`, -8.023430735897286, -7.750038963244693}]}, 
   {Hue[0.07240844310706475], 
    Point3DBox[{
     28.296408228122328`, -10.662361489234714`, -7.581999733426755}]}, 
   {Hue[0.07855607754329666], 
    Point3DBox[{
     28.81183655254241, -13.909121864539477`, -7.720108336711243}]}, 
   {Hue[0.05598620666899132], 
    Point3DBox[{26.919539466925336`, -16.09026587207009, -7.21306886078038}]}, 
   {Hue[0.056226207992169805`], 
    Point3DBox[{
     26.939661593760892`, -19.52878120801465, -7.218460568415964}]}, 
   {Hue[0.03941152026104489], 
    Point3DBox[{25.529889036072383`, -22.17781106077841, -6.84071315007177}]}, 
   {Hue[0.08517832158913403], 
    Point3DBox[{29.36705696908672, -30.4030145688414, -7.86887919894556}]}, 
   {Hue[0.], 
    Point3DBox[{
     22.225558880837994`, -19.846338948605002`, -8.08944187255588}]}, 
   {Hue[0.016457115330422052`], 
    Point3DBox[{
     23.605351948811414`, -17.589417018968764`, -8.591645478745049}]}, 
   {Hue[0.0304573499639967], 
    Point3DBox[{
     24.779155881612333`, -15.22439572482287, -9.018875171149189}]}, 
   {Hue[0.06060431820015307], 
    Point3DBox[{
     27.306729940461484`, -7.786393203090202, -9.938836893473692}]}, 
   {Hue[0.0752051669143253], 
    Point3DBox[{28.530890398588795`, 
     2.6563254993845993`, -10.384394862197707`}]}, 
   {Hue[0.06998839815393859], 
    Point3DBox[{28.09350746553638, 5.271557144681832, -10.225200493590583`}]}, 
   {Hue[0.06690398233245609], 
    Point3DBox[{27.83490469805368, 7.936999897905971, -10.131076783728018`}]}, 
   {Hue[0.0593924906974639], 
    Point3DBox[{27.205128222650153`, 
     10.537336011172112`, -9.901856892440051}]}, 
   {Hue[0.04159973305156122], 
    Point3DBox[{25.713352588401257`, 
     12.759846106680175`, -9.358894965369869}]}, 
   {Hue[0.03541527314685542], 
    Point3DBox[{25.194836752889167`, 15.47979143361107, -9.170170635247798}]}, 
   {Hue[0.021993002765096692`], 
    Point3DBox[{24.06949034451951, 17.935267562283197`, -8.760578039362864}]}, 
   {Hue[0.008399655559729673], 
    Point3DBox[{22.9298005587981, 20.47519238340347, -8.345764881063044}]}, 
   {Hue[0.004743145385092394], 
    Point3DBox[{22.623232409359883`, 24.07514107159746, -8.23418319989346}]}},
  
  AspectRatio->1,
  Axes->True,
  AxesLabel->{
    FormBox["\"x\"", TraditionalForm], 
    FormBox["\"y\"", TraditionalForm], 
    FormBox["\"z\"", TraditionalForm]},
  BoxRatios->{1, 1, 0.4},
  FaceGridsStyle->Automatic,
  ImageSize->Large,
  PlotRange->{{22.225558880837994`, 64.1464253349602}, {-30.4030145688414, 
    35.18126704036283}, Automatic},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {Automatic, Automatic}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-3.3681687142691437`, 0.1486341723869797, 0.2886994891187618},
  ViewVertical->{-0.5208088111289728, -0.004198376516734034, 
   2.1341575561053503`}]], "Output",
 CellChangeTimes->{{3.6841963882050667`*^9, 3.684196418759768*^9}, 
   3.684196450135468*^9, {3.684197032168898*^9, 3.6841970442770767`*^9}, 
   3.684197204017983*^9, 3.684198180246297*^9, 3.684199513851263*^9, 
   3.684199560890291*^9, {3.684201724292602*^9, 3.684201742676836*^9}, 
   3.684202347019348*^9, 3.684203170939291*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Optional command to export good data", "Subsection",
 CellChangeTimes->{{3.684201006917094*^9, 3.684201011785325*^9}}],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<filename\>\"", ",", "points", ",", "\"\<Data\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.68419979697025*^9, 3.6841998091726837`*^9}, {
  3.68419983999255*^9, 3.6841998609757843`*^9}, {3.6842010152422943`*^9, 
  3.6842010199119577`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "rawdata", "]"}]], "Input",
 CellChangeTimes->{{3.68420221183239*^9, 3.684202217373824*^9}}],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.684202217578024*^9}]
}, Open  ]],

Cell["", "Subsubsection"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Close serial device", "Section"]], "Title",
 CellChangeTimes->{3.6841056536694527`*^9}],

Cell[BoxData[
 RowBox[{"DeviceClose", "[", "serial", "]"}]], "Input"]
}, Open  ]]
},
WindowSize->{956, 1041},
WindowMargins->{{2, Automatic}, {2, Automatic}},
FrontEndVersion->"11.0 for Linux x86 (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 134, 1, 81, "Title"],
Cell[CellGroupData[{
Cell[739, 27, 104, 1, 65, "Section"],
Cell[CellGroupData[{
Cell[868, 32, 240, 5, 70, "Subsection"],
Cell[1111, 39, 666, 18, 103, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1814, 62, 178, 4, 45, "Subsection"],
Cell[CellGroupData[{
Cell[2017, 70, 748, 15, 42, "Input"],
Cell[2768, 87, 1137, 18, 34, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3954, 111, 166, 3, 45, "Subsection"],
Cell[CellGroupData[{
Cell[4145, 118, 841, 20, 73, "Input"],
Cell[4989, 140, 5764, 106, 462, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10814, 253, 197, 3, 65, "Section"],
Cell[CellGroupData[{
Cell[11036, 260, 172, 3, 45, "Subsection"],
Cell[11211, 265, 699, 15, 80, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[11947, 285, 166, 3, 45, "Subsection"],
Cell[12116, 290, 348, 12, 49, "Input",
 InitializationCell->True],
Cell[12467, 304, 346, 7, 41, "Input"],
Cell[12816, 313, 349, 12, 49, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[13202, 330, 221, 5, 71, "Subsection"],
Cell[13426, 337, 1039, 27, 160, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[14502, 369, 182, 4, 45, "Subsection"],
Cell[14687, 375, 1824, 44, 310, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16560, 425, 126, 1, 65, "Section"],
Cell[CellGroupData[{
Cell[16711, 430, 112, 1, 45, "Subsection"],
Cell[CellGroupData[{
Cell[16848, 435, 1479, 24, 35, "Input"],
Cell[18330, 461, 19409, 374, 65, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37788, 841, 198, 2, 45, "Subsection"],
Cell[37989, 845, 92, 3, 32, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38118, 853, 212, 4, 71, "Subsection"],
Cell[38333, 859, 203, 5, 35, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38573, 869, 203, 5, 96, "Subsection"],
Cell[CellGroupData[{
Cell[38801, 878, 1531, 29, 148, "Input"],
Cell[40335, 909, 352, 6, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[40736, 921, 150, 2, 45, "Subsection"],
Cell[CellGroupData[{
Cell[40911, 927, 2622, 53, 125, "Input"],
Cell[43536, 982, 11479, 259, 702, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[55064, 1247, 124, 1, 45, "Subsection"],
Cell[55191, 1250, 296, 6, 35, "Input"],
Cell[CellGroupData[{
Cell[55512, 1260, 130, 2, 32, "Input"],
Cell[55645, 1264, 72, 1, 30, "Output"]
}, Open  ]],
Cell[55732, 1268, 25, 0, 35, "Subsubsection"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[55818, 1275, 111, 1, 74, "Title"],
Cell[55932, 1278, 69, 1, 35, "Input"]
}, Open  ]]
}
]
*)

